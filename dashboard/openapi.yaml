openapi: 3.0.3
info:
  title: RBAC Dashboard API
  description: API for managing users, roles, permissions, and audit logs within the RBAC Dashboard.
  version: "1.0"
servers:
  - url: http://localhost:3000/api
    description: Development Server
paths:
  /users:
    get:
      summary: List all users
      tags:
        - Users
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid input
  /users/{userId}:
    get:
      summary: Get a user by ID
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
    put:
      summary: Update a user
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        200:
          description: User updated successfully
        400:
          description: Invalid input
        404:
          description: User not found
    delete:
      summary: Delete a user by ID
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: User deleted successfully
        404:
          description: User not found
  /roles:
    get:
      summary: List all roles
      tags:
        - Roles
      responses:
        200:
          description: A list of roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
    post:
      summary: Create a new role
      tags:
        - Roles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewRole'
      responses:
        201:
          description: Role created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
                
  /roles/{roleId}:
    get:
      summary: Get a role by ID
      tags:
        - Roles
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
    put:
      summary: Update a role
      tags:
        - Roles
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleUpdate'
      responses:
        200:
          description: Role updated successfully
    delete:
      summary: Delete a role by ID
      tags:
        - Roles
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Role deleted successfully
          
  /permissions:
    get:
      summary: List all permissions
      tags:
        - Permissions
      responses:
        200:
          description: A list of permissions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
    post:
      summary: Create a new permission
      tags:
        - Permissions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPermission'
      responses:
        201:
          description: Permission created successfully
          
  /users/{userId}/roles:
    post:
      summary: Assign multiple roles to a user
      tags:
        - Users
        - Roles
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roleIds:
                  type: array
                  items:
                    type: string
                  description: Array of role IDs to be assigned to the user
      responses:
        200:
          description: Roles assigned successfully
        404:
          description: User or any of the roles not found

    get:
      summary: List all roles for a user
      tags:
        - Users
        - Roles
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'

    delete:
      summary: Remove multiple roles from a user
      tags:
        - Users
        - Roles
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Roles removed successfully
        404:
          description: User or any of the roles not found
          
  /roles/{roleId}/permissions:
    post:
      summary: Assign multiple permissions to a role
      tags:
        - Roles
        - Permissions
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                permissionIds:
                  type: array
                  items:
                    type: string
                  description: Array of permission IDs to be assigned to the role
      responses:
        200:
          description: Permissions assigned successfully
        404:
          description: Role or any of the permissions not found

    get:
      summary: List all permissions for a role
      tags:
        - Roles
        - Permissions
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'

    delete:
      summary: Remove multiple permissions from a role
      tags:
        - Roles
        - Permissions
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Permissions removed successfully
        404:
          description: Role or any of the permissions not found
          
  /users/{userId}/deactivate:
    post:
      summary: Deactivate a user account
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: User account deactivated successfully

  /users/{userId}/reactivate:
    post:
      summary: Reactivate a user account
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: User account reactivated successfully
  
  /users/{userId}/initiate-password-reset:
    post:
      summary: Initiate password reset process for a user
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Password reset initiated

  /users/{userId}/complete-password-reset:
    post:
      summary: Complete password reset process for a user
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                  format: password
      responses:
        200:
          description: Password reset completed successfully
          
  /audit-logs:
    get:
      summary: List all audit logs
      tags:
        - Audit Logs
      responses:
        200:
          description: A list of audit logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditLog'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        email:
          type: string
          format: email
          example: user@example.com
        isActive:
          type: boolean
          example: true
        roles:
          type: array
          items:
            type: string
    NewUser:
      type: object
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          example: Passw0rd!
        roles:
          type: array
          items:
            type: string
          example:
            - admin
            - user
    UserUpdate:
      type: object
      properties:
        email:
          type: string
          format: email
          example: new_email@example.com
        isActive:
          type: boolean
          example: false
    Role:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        permissions:
          type: array
          items:
            type: string
    NewRole:
      type: object
      properties:
        name:
          type: string
        permissions:
          type: array
          items:
            type: string
    RoleUpdate:
      type: object
      properties:
        name:
          type: string
        permissions:
          type: array
          items:
            type: string
    Permission:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    NewPermission:
      type: object
      properties:
        name:
          type: string
    AuditLog:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
        action:
          type: string
        description:
          type: string
        timestamp:
          type: string
          format: date-time
  